name: Deploy NASA API to EKS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPO: nasa-api
  CLUSTER_NAME: eks-nasa-fargate
  ASSUME_ROLE_ARN: arn:aws:iam::712216923434:role/eksctl-eks-nasa-fargate-cluster-ServiceRole-M5J8p51U4hsq

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (assume role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ASSUME_ROLE_ARN }}
          role-session-name: gha-eks-deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Verify cluster access
        run: |
          echo "Verificando acesso ao cluster ${{ env.CLUSTER_NAME }}..."
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "✅ Cluster encontrado e acessível!"
          else
            echo "❌ Cluster não encontrado ou sem permissão de acesso"
            echo "📋 Execute primeiro: ./setup-aws-ultra-economico.sh"
            exit 1
          fi

      - name: Update K8s manifests and deploy
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          # Garantir secret com a NASA_API_KEY
          kubectl create namespace default --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic nasa-secret --from-literal=api-key="${{ secrets.NASA_API_KEY }}" -n default --dry-run=client -o yaml | kubectl apply -f -
          # Usar deployment otimizado para Fargate
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest
          sed "s|<ECR_REPO_URI>|$IMAGE_URI|g" k8s/nasa-api-fargate-deployment.yaml > k8s/nasa-api-deployment-updated.yaml
          kubectl apply -f k8s/nasa-api-deployment-updated.yaml
          kubectl rollout status deployment/nasa-api
