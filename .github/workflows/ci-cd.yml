name: CI/CD - Build, Push to ECR, Deploy to EKS, Install Monitoring

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: nasa-api
  EKS_CLUSTER_NAME: eks-nasa

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU and Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Build and push Docker image to ECR
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          ECR_REPO: ${{ env.ECR_REPO }}
        run: |
          IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ github.sha }}"
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl and eksctl and helm
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Create nasa secret in cluster
        env:
          NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
        run: |
          kubectl create namespace default --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic nasa-secret --from-literal=api-key="$NASA_API_KEY" -n default --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy app to EKS
        run: |
          IMAGE="${{ steps.build-and-push-docker-image.outputs.image || '' }}"
          IMAGE="${{ steps.build-push-deploy.outputs.image || '' }}"
          # fallback: use computed image from earlier step output
          IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ github.sha }}"
          sed -e "s|<ECR_REPO_URI>/nasa-api:latest|${IMAGE}|g" k8s/nasa-api-deployment.yaml > k8s/nasa-api-deployment.rendered.yaml
          kubectl apply -f k8s/nasa-api-deployment.rendered.yaml
          kubectl apply -f k8s/service.yaml

      - name: Install Prometheus + Grafana via Helm
        env:
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace --values monitoring/prom-values.yaml --set grafana.adminPassword=${GRAFANA_ADMIN_PASSWORD}

      - name: Apply ServiceMonitor and Grafana dashboard
        run: |
          kubectl apply -n monitoring -f monitoring/prometheus/servicemonitor.yaml || true
          kubectl apply -n monitoring -f monitoring/grafana/dashboard-configmap.yaml || true